swagger: '2.0'
host: slt.ufal.mff.cuni.cz
basePath: /sabina-api
schemes:
  - https
info:
  title: SQLSaga API
  description: >
    This API is designed to manage user authentication, tasks, codes, and database operations.
    It provides endpoints for user login and registration, task management, code handling, and
    access to database tables. The API requires authentication via API key and token validation
    for certain operations.

    - Authentication: The API key must be included in the `X-API-KEY` header for authorized access.
    
    - Tokens: Tokens are generated during user login and expire after a specified duration.
    
    - Task Management: Allows users to view public tasks, create tasks, and delete tasks they own.
    
    - Code Handling: Supports adding codes and associating them with tasks, retrieving code IDs, and
      fetching tasks associated with specific codes.
      
    - Database Operations: Provides access to retrieve data from various database tables.
  version: '1.0'
paths:
  /tokens:
    post:
      tags:
        - Tokens
      summary: Verify token endpoint
      parameters:
        - in: body
          name: body
          description: Token object that needs to be verified
          required: true
          schema:
            type: object
            properties:
              token:
                type: string
                example: "your_token_here"
      responses:
        '200':
          description: Token verified successfully
        '401':
          description: Unauthorized access or token expired

  /get_api_key:
    get:
      tags:
        - Get API Key
      summary: Get API Key
      responses:
        '200':
          description: Returns the API key
        '500':
          description: Internal server error

  /users/logins/emails/{emails}/passwords/{passwords}:
    post:
      tags:
        - Login
      summary: Login endpoint
      parameters:
        - name: emails
          in: path
          required: true
          type: string
        - name: passwords
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Login successful
          schema:
            type: object
            properties:
              userID:
                type: integer
              token:
                type: string
        '401':
          description: Unauthorized access or wrong password
        '404':
          description: User does not exist
        '500':
          description: Internal server error

  /users/registrations/emails/{emails}:
    post:
      tags:
        - Registration
      summary: Registration endpoint
      parameters:
        - name: emails
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Registration successful
        '500':
          description: Internal server error

  /tasks/users:
    post:
      tags:
        - Tasks
      summary: Get task sets for a user
      parameters:
        - in: body
          name: body
          description: Token object to retrieve task sets
          required: true
          schema:
            type: object
            properties:
              token:
                type: string
                example: "your_token_here"
      responses:
        '200':
          description: Returns tasks successfully
          schema:
            type: array
            items:
              type: object
              properties:
                taskID:
                  type: integer
                assignment:
                  type: string
                solution:
                  type: string
                userID:
                  type: integer
        '401':
          description: Unauthorized access or token expired

  /tasks:
    get:
      tags:
        - Tasks
      summary: Get public tasks
      responses:
        '200':
          description: Returns public tasks successfully
          schema:
            type: array
            items:
              type: object
              properties:
                taskID:
                  type: integer
                assignment:
                  type: string
                solution:
                  type: string
        '401':
          description: Unauthorized access

    post:
      tags:
        - Tasks
      summary: Create a task
      parameters:
        - in: body
          name: body
          description: Task object to be created
          required: true
          schema:
            type: object
            properties:
              token:
                type: string
                example: "your_token_here"
              assignment:
                type: string
              solution:
                type: string
      responses:
        '200':
          description: Task created successfully
        '401':
          description: Unauthorized access or token expired
        '403':
          description: Forbidden (wrong user)
        '404':
          description: Task not found

  /tasks/taskID/{taskID}:
    delete:
      tags:
        - Tasks
      summary: Delete a task by ID
      parameters:
        - name: taskID
          in: path
          required: true
          type: integer
        - in: body
          name: body
          description: Token object for task deletion
          required: true
          schema:
            type: object
            properties:
              token:
                type: string
                example: "your_token_here"
      responses:
        '200':
          description: Task deleted successfully
        '401':
          description: Unauthorized access or token expired
        '403':
          description: Forbidden (wrong user)
        '404':
          description: Task not found

  /codes:
    post:
      tags:
        - Codes
      summary: Add a code
      parameters:
        - in: body
          name: body
          description: Code object to be added
          required: true
          schema:
            type: object
            properties:
              token:
                type: string
                example: "your_token_here"
              code:
                type: string
              userID:
                type: integer
              checkedBoxes:
                type: array
                items:
                  type: integer
      responses:
        '200':
          description: Code added successfully
        '400':
          description: Code already exists
        '401':
          description: Unauthorized access or token expired

  /codes/codeID/{codes}:
    get:
      tags:
        - Codes
      summary: Get code ID by code
      parameters:
        - name: codes
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Returns code ID successfully
          schema:
            type: object
            properties:
              codeID:
                type: integer
        '404':
          description: Code not found

  /tasks/codes/{codes}:
    get:
      tags:
        - Tasks
      summary: Get tasks by code
      parameters:
        - name: codes
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Returns tasks successfully
          schema:
            type: array
            items:
              type: object
              properties:
                assignment:
                  type: string
                solution:
                  type: string
        '401':
          description: Unauthorized access
        '404':
          description: Code not found

  /tables/{tables}:
    get:
      tags:
        - Tables
      summary: Get data from tables
      parameters:
        - name: tables
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Returns table data successfully
          schema:
            type: object
            properties:
              column_names:
                type: array
                items:
                  type: string
              data:
                type: array
                items:
                  type: array
                  items:
                    type: string
        '500':
          description: Internal server error

  /:
    get:
      tags:
        - Index
      summary: Index endpoint
      responses:
        '200':
          description: Returns API description
          schema:
            type: string
            example: "CZ: Nav≈°tivte index.py pro popis API. EN: Visit index.py for API description."